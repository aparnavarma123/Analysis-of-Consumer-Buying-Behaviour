# import libraries: dataframe manipulation, machine learning, os tools
from pandas import Series, DataFrame
import pandas as pd
import numpy as np
import openpyxl
import os
import matplotlib.pylab as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import sklearn.metrics
from sklearn import datasets
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
#Actual Behaviour
book = openpyxl.load_workbook('15002.xlsx')
sheetR = book['Sheet3']
l=[]
l2=[]
l4=[]
for r in range (sheetR.max_row-1):
    cell1 = sheetR.cell(row=r+2,column=16).value
    l.append(cell1)
h=0.70*sheetR.max_row
for r in range (int(h),sheetR.max_row-1):
    cell1 = sheetR.cell(row=r+2,column=14).value
    l4.append(int(cell1))

for i in range(int(h)-1,sheetR.max_row-1):
    if l[i]==101:
        l2.append("Environmental")
    if l[i]==102:
        l2.append("Individual")
    if l[i]==103:
        l2.append("Organisational")
    if l[i]==104:
        l2.append("Interpersonal")
# Load the dataset 
AH_data = pd.read_excel("15002.xlsx",sheetname='Sheet3')
data_clean = AH_data.dropna()
data_clean.head()
data_clean.dtypes # data types of each variable
data_clean.describe()
predictors = data_clean[['segment','cat','sub','Order Quantity','Sales','stat','pri']]
#print predictors
targets = data_clean.beh
pred_train, pred_test,tar_train, tar_test = train_test_split(predictors,targets, test_size=0.3,shuffle=False)

# shape/dimensions of the DataFrame
pred_train.shape
pred_test.shape
tar_train.shape
tar_test.shape
# Build model on training data
from sklearn.ensemble import RandomForestClassifier
# n_estimators is the amount of trees to build
classifier=RandomForestClassifier(n_estimators=7)
# fit the RandomForest Model
classifier=classifier.fit(pred_train,tar_train)
predictions=classifier.predict(pred_test)

l3=[]

for i in range(len(predictions)):
    print predictions[i]
    if predictions[i]==101:
        l3.append("Environmental")
    if predictions[i]==102:
        l3.append("Individual\t")
    if predictions[i]==103:
        l3.append("Organisational")
    if predictions[i]==104:
        l3.append("Interpersonal")
print "Predicted Behaviour",'\t',"Actual Behaviour"
print "-----------------------------------"
for i in range(len(l3)):
    print l3[i],'\t\t',l2[i]
print "-----------------------------------"
# confusion matrix / missclassification matrix
print "confusion metrics:\n",sklearn.metrics.confusion_matrix(tar_test,predictions)
print "-------------------"
print 'accuracy :',sklearn.metrics.accuracy_score(tar_test, predictions)
print "-------------------"
print "Report :\n",sklearn.metrics.classification_report(tar_test,predictions)
print "-------------------"